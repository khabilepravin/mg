// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dataModel;

namespace dataModel.Migrations
{
    [DbContext(typeof(MgDataContext))]
    [Migration("20191005044139_ForeignIndexes")]
    partial class ForeignIndexes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("dataModel.Media", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("Episode");

                    b.Property<string>("ExternalLink");

                    b.Property<string>("Image");

                    b.Property<string>("Keywords");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("ReleaseDate");

                    b.Property<string>("Season");

                    b.Property<string>("Status");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("dataModel.MediaArtist", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("ExternalLink");

                    b.Property<string>("Image");

                    b.Property<string>("MediaId")
                        .IsRequired();

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name");

                    b.Property<string>("PersonName");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.ToTable("MediaArtist");
                });

            modelBuilder.Entity("dataModel.MediaTag", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MediaId")
                        .IsRequired();

                    b.Property<string>("TagId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("TagId");

                    b.ToTable("MediaTag");
                });

            modelBuilder.Entity("dataModel.MediaText", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Language");

                    b.Property<string>("MediaId")
                        .IsRequired();

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Status");

                    b.Property<string>("Text");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.ToTable("MediaText");
                });

            modelBuilder.Entity("dataModel.ParsedText", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArtistId");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<string>("GroupId");

                    b.Property<string>("MediaTextId")
                        .IsRequired();

                    b.Property<TimeSpan>("StartTime");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("MediaTextId");

                    b.ToTable("ParsedText");
                });

            modelBuilder.Entity("dataModel.ParsedTextArtist", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("MediaArtistId")
                        .IsRequired();

                    b.Property<string>("ParsedTextId")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MediaArtistId");

                    b.HasIndex("ParsedTextId");

                    b.ToTable("ParsedTextArtist");
                });

            modelBuilder.Entity("dataModel.TagMaster", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TagMaster");
                });

            modelBuilder.Entity("dataModel.TextTag", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ParsedTextId")
                        .IsRequired();

                    b.Property<string>("TagId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ParsedTextId");

                    b.HasIndex("TagId");

                    b.ToTable("TextTag");
                });

            modelBuilder.Entity("dataModel.UserCollection", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserCollection");
                });

            modelBuilder.Entity("dataModel.UserCollectionItem", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Added");

                    b.Property<string>("CollectionId")
                        .IsRequired();

                    b.Property<string>("EntityId")
                        .IsRequired();

                    b.Property<string>("EntityType");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.HasIndex("EntityId");

                    b.ToTable("UserCollectionItem");
                });

            modelBuilder.Entity("dataModel.UserFavorite", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("ParsedTextId")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ParsedTextId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFavorite");
                });
#pragma warning restore 612, 618
        }
    }
}
